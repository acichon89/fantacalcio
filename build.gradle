buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1" 
    }
}

plugins {
  id "org.sonarqube" version "2.0.1"
}

subprojects {
	// PLUGINS:
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'	
    // DESCRIPTIONS:
	version = '1.0'
	description = 'FantaCalcio main module'
	sourceCompatibility = 1.8
	
	// REPOSITORIES:
	repositories {
	    mavenCentral()
	}
	/// SOURCE SETS:
	sourceSets {
	    integrationTest {
	        java {
	            compileClasspath += main.output + test.output
	            runtimeClasspath += main.output + test.output
	            srcDir file('src/test-integration/java')
	        }
	        resources.srcDir file('src/test-integration/resources')
	    }
	}
	// DEPENDENCIES:
	dependencies {
		//compile:
	    
		//provided:
	    compile "org.projectlombok:lombok:1.12.6"
	    //test:
	    
	    //integration test:
	    
	    //configuration:
		integrationTestCompile sourceSets.main.output		
		integrationTestCompile configurations.testCompile
		integrationTestRuntime configurations.testRuntime	
		
	}
	/// TASKS :
	task integrationTest(type: Test) {
		systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active")
	    testClassesDir = sourceSets.integrationTest.output.classesDir
	    classpath = sourceSets.integrationTest.runtimeClasspath
	    outputs.upToDateWhen { false }
	    reports.junitXml.destination = file("$buildDir/integration-test-results/")
		reports.html.destination = file("$buildDir/reports/integration-tests/")
	}
	
	jacocoTestReport(){
		group = "Reporting"
		description = "Generate Jacoco coverage reports after running tests."
            reports {
		        xml.enabled = true // coveralls plugin depends on xml format report
		        html.enabled = true
	        }
        }
	
	task jacocoIntegrationTestReport(type:JacocoReport){
		  group = "Reporting"
	      description = "Generate Jacoco coverage reports after running integration tests."
	
	      executionData = fileTree(dir: 'build/jacoco', include: 'integrationTest.exec')
	
	      reports {
	             xml{
	                 enabled false
	             }
	             csv.enabled false
	             html{
	                 enabled true
	                 //Following value is a folder
	                 destination "${buildDir}/reports/jacoco/integration-test/html"
	             }
	      }
	
	
	      sourceDirectories = files(sourceSets.main.allSource.srcDirs)
	      classDirectories = files(sourceSets.main.output.classesDir)
	}
	
	check.dependsOn integrationTest
	integrationTest.dependsOn test
	
}
	
sonarqube {
    properties {
        property "sonar.projectName", "FantaCalcio"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
      	property "sonar.jacoco.itReportPath", "build/jacoco/integrationTest.exec"
      	property "sonar.coverage.exclusions", "**Context.java, **Application.java"
      	property "sonar.exclusions", "**Context.java, **Configurer.java, **Application.java"
    }
}
