buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1" 
    }
}

plugins {
  id "org.sonarqube" version "2.0.1"
}

subprojects {
	// PLUGINS:
	apply plugin: 'java'
	apply plugin: 'eclipse-wtp'
	apply plugin: 'jacoco'
        apply plugin: 'com.github.kt3k.coveralls'	
        /// DESCRIPTIONS:
	version = '1.0'
	description = 'FantaCalcio main module'
	sourceCompatibility = 1.8
	
	// REPOSITORIES:
	repositories {
	    mavenCentral()
	}
	// CONFIGURATIONS:
	configurations {
	    provided
	}
	/// SOURCE SETS:
	sourceSets {
	    main {
	        compileClasspath = compileClasspath + configurations.provided
	    }
	    test {
	    	java {
	    		srcDir file('src/test-unit/java');
	    	}
	    	resources.srcDir file('src/test-unit/resources')
	        compileClasspath = compileClasspath + configurations.provided
	    }
	    integrationTest {
	    	compileClasspath = compileClasspath + configurations.provided
	        java {
	            compileClasspath += main.output + test.output
	            runtimeClasspath += main.output + test.output
	            srcDir file('src/test-integration/java')
	        }
	        resources.srcDir file('src/test-integration/resources')
	    }
	}
	// DEPENDENCIES:
	dependencies {
		//compile:
		compile 'org.springframework:spring-context:4.2.2.RELEASE'
	    compile 'org.springframework:spring-core:4.2.2.RELEASE'
	    compile 'org.springframework:spring-aspects:4.2.2.RELEASE'
	    compile 'org.springframework.integration:spring-integration-core:4.2.5.RELEASE'
	    compile 'org.springframework.integration:spring-integration-flow:1.0.0.RELEASE'
	    compile 'org.springframework.security:spring-security-core:3.2.0.RELEASE'
	    compile 'org.springframework.security:spring-security-config:3.2.0.RELEASE'
	    compile 'com.zaxxer:HikariCP:2.4.3'	
	    compile 'com.h2database:h2:1.4.190'
	    compile 'org.springframework.data:spring-data-jpa:1.8.2.RELEASE'	  
        compile 'org.hibernate:hibernate-entitymanager:4.3.8.Final'
        //compile 'mysql:mysql-connector-java:5.1.38'	    
	    compile 'net.sf.dozer:dozer:5.5.1'
	    compile 'joda-time:joda-time:2.8.2'
	    compile 'com.google.guava:guava:18.0'
	    compile 'org.jadira.usertype:usertype.core:3.1.0.GA'
	    
		//provided:
	    provided "org.projectlombok:lombok:1.12.6"
	    //test:
	    testCompile 'junit:junit:4.12'	
	    testCompile 'org.mockito:mockito-all:1.10.19'
	    //integration test:
	    integrationTestCompile 'org.springframework:spring-test:4.2.2.RELEASE'
	    integrationTestCompile 'org.flywaydb:flyway-core:3.2.1'
	    integrationTestCompile 'org.flywaydb.flyway-test-extensions:flyway-test-extensions:3.2.1.1'
	    integrationTestCompile 'org.flywaydb.flyway-test-extensions:flyway-spring-test:3.2.1.1'
	    integrationTestCompile 'org.flywaydb.flyway-test-extensions:flyway-spring4-test:3.2.1.1'
	    integrationTestCompile 'org.springframework.security:spring-security-test:4.0.4.RELEASE'
	    integrationTestCompile 'com.h2database:h2:1.4.191'
	    
	    //configuration:
		integrationTestCompile sourceSets.main.output		
		integrationTestCompile configurations.testCompile
		integrationTestRuntime configurations.testRuntime	
		
	}
	/// TASKS :
	task integrationTest(type: Test) {
		systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active")
	    testClassesDir = sourceSets.integrationTest.output.classesDir
	    classpath = sourceSets.integrationTest.runtimeClasspath
	    outputs.upToDateWhen { false }
	    reports.junitXml.destination = file("$buildDir/integration-test-results/")
		reports.html.destination = file("$buildDir/reports/integration-tests/")
	}
	
	jacocoTestReport(){
		group = "Reporting"
		description = "Generate Jacoco coverage reports after running tests."
            reports {
		        xml.enabled = true // coveralls plugin depends on xml format report
		        html.enabled = true
	        }
	        
	        afterEvaluate {
		        classDirectories = files(classDirectories.files.collect {
		            fileTree(dir: it, exclude: ['**Context.java', '**Configurer.java'])
		        })
		    }
        }
	
	task jacocoIntegrationTestReport(type:JacocoReport){
		  group = "Reporting"
	      description = "Generate Jacoco coverage reports after running integration tests."
	
	      executionData = fileTree(dir: 'build/jacoco', include: 'integrationTest.exec')
	
	      reports {
	             xml{
	                 enabled false
	             }
	             csv.enabled false
	             html{
	                 enabled true
	                 //Following value is a folder
	                 destination "${buildDir}/reports/jacoco/integration-test/html"
	             }
	      }
	      
	      afterEvaluate {
		        classDirectories = files(classDirectories.files.collect {
		            fileTree(dir: it, exclude: ['**Context.java', '**Configurer.java'])
		        })
		    }

	      sourceDirectories = files(sourceSets.main.allSource.srcDirs)
	      classDirectories = files(sourceSets.main.output.classesDir)
	}
	
	check.dependsOn integrationTest
	integrationTest.dependsOn test
	
	/// IDE :
	eclipse {
	  classpath {
	    plusConfigurations += [ configurations.provided ]
	    plusConfigurations += [ configurations.integrationTestCompile]
	  }
	}
	
	configurations {
	    all*.exclude group: 'javassist', module: 'javassist' // get rid of hibernate-incompatible javassist
	}
}
	
sonarqube {
    properties {
        property "sonar.projectName", "FantaCalcio"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
      	property "sonar.jacoco.itReportPath", "build/jacoco/integrationTest.exec"
      	property "sonar.coverage.exclusions", "**Context.java, **Configurer.java"
      	property "sonar.exclusions", "**Context.java, **Configurer.java"
    }
}